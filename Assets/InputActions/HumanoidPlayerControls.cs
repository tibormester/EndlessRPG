//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/HumanoidPlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HumanoidPlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HumanoidPlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HumanoidPlayerControls"",
    ""maps"": [
        {
            ""name"": ""movement"",
            ""id"": ""adf8785a-245e-459f-9e57-9f869352f871"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""b3081cd8-6061-4f2d-9606-1644d413522a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": ""NormalizeVector3"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""look"",
                    ""type"": ""Value"",
                    ""id"": ""a4f9c485-616a-4d9a-828b-411f1e46d140"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""zoom"",
                    ""type"": ""Value"",
                    ""id"": ""f1549cf7-724c-4be1-b344-a136ecc0c374"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""1dfbed7e-4ea2-4301-9680-0e4abbe58bbd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6e42c6f8-ec27-40f5-9b0f-ed4a5884560e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""groups"": """",
                    ""action"": ""look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5e8aa858-7198-4c58-8993-36582562e2fe"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fe177473-8918-43b6-b256-986b29f2ef61"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9c1f7c2f-f6c7-466e-b0ae-1c31c1cbce64"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Direction"",
                    ""id"": ""79bc7e4b-6b2e-472e-b0a7-1282d1d765d0"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""80b12b84-ba36-4e05-b1e5-c4ef54f9fee2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0395910d-2770-4abd-a000-903bdc0df9e1"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""37e170d9-20ec-4829-acb0-12c1f95eba06"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e84772ee-bb22-4db0-8bd3-1c5c871adfda"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""d7c32a44-5016-44f9-8fed-8eb195d09318"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""0fa9be5a-d3e0-478e-96dd-7c9d955e0f02"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7da10df4-2e21-4279-bd75-db77dd67688f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""combat"",
            ""id"": ""987a7e32-8c41-494d-b8bc-0f15e49f2744"",
            ""actions"": [
                {
                    ""name"": ""Toggle Ready"",
                    ""type"": ""Button"",
                    ""id"": ""3b8aa9be-44c9-4844-b51d-4f6c8715ea20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup Throw"",
                    ""type"": ""Button"",
                    ""id"": ""23f50a86-db1e-4f7b-be13-5f3239d161c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slash"",
                    ""type"": ""Button"",
                    ""id"": ""4cec5f62-b5f8-47a3-a6f9-4010bb99591e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.3)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Button"",
                    ""id"": ""3b33deef-e49a-46b0-a28f-37e00178de18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle Camera"",
                    ""type"": ""Button"",
                    ""id"": ""8b933e92-8113-488d-a46c-c1d758ff99af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""521a7f12-bf4b-41a1-9770-02a5abe9c83b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Camera"",
                    ""type"": ""Button"",
                    ""id"": ""d39b4471-a5b2-4c4e-9bc7-16a2f1306e8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3af0313b-e541-47ba-b8e9-1da7637280e0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bee81f7-2503-4733-ad33-77ff7d2b8c19"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""099f0774-fc84-45e2-adb6-bc2943c92922"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e8293e4-7b42-4191-9e0f-c0ca2282fbd0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1f429cc-88cc-4d07-8fea-c36bda53771a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb487601-8e32-481f-9ae4-27f6ab68482b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""424b58e1-5952-4879-9234-245f843f9fc2"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Ready"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47c100e4-a373-49e1-8e78-a58c7008709d"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1c33116-6a58-446b-afbf-0a08ae870975"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e4f4089-43f7-469c-87c1-032d664ca0bc"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ui"",
            ""id"": ""2e97bf26-2c89-423a-a5dc-5a5fea572c00"",
            ""actions"": [
                {
                    ""name"": ""Menus"",
                    ""type"": ""Button"",
                    ""id"": ""c1937d03-5559-4416-b024-0c0236c26e8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c2afea19-39da-4dd3-bc2f-0e0e205ef021"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Ready"",
                    ""type"": ""Button"",
                    ""id"": ""f3a3e2f2-789a-4b3e-946f-96bec7a7da6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""136890c5-f347-4959-bfe9-6257c50e6f49"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be602945-ceb1-4476-9cf6-522f28e3e545"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84e781d8-60c7-452a-9d98-9025c58b3c5e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Ready"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // movement
        m_movement = asset.FindActionMap("movement", throwIfNotFound: true);
        m_movement_move = m_movement.FindAction("move", throwIfNotFound: true);
        m_movement_look = m_movement.FindAction("look", throwIfNotFound: true);
        m_movement_zoom = m_movement.FindAction("zoom", throwIfNotFound: true);
        m_movement_Newaction = m_movement.FindAction("New action", throwIfNotFound: true);
        // combat
        m_combat = asset.FindActionMap("combat", throwIfNotFound: true);
        m_combat_ToggleReady = m_combat.FindAction("Toggle Ready", throwIfNotFound: true);
        m_combat_PickupThrow = m_combat.FindAction("Pickup Throw", throwIfNotFound: true);
        m_combat_Slash = m_combat.FindAction("Slash", throwIfNotFound: true);
        m_combat_Thrust = m_combat.FindAction("Thrust", throwIfNotFound: true);
        m_combat_CycleCamera = m_combat.FindAction("Cycle Camera", throwIfNotFound: true);
        m_combat_Look = m_combat.FindAction("Look", throwIfNotFound: true);
        m_combat_RotateCamera = m_combat.FindAction("Rotate Camera", throwIfNotFound: true);
        // ui
        m_ui = asset.FindActionMap("ui", throwIfNotFound: true);
        m_ui_Menus = m_ui.FindAction("Menus", throwIfNotFound: true);
        m_ui_Interact = m_ui.FindAction("Interact", throwIfNotFound: true);
        m_ui_ToggleReady = m_ui.FindAction("Toggle Ready", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // movement
    private readonly InputActionMap m_movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_movement_move;
    private readonly InputAction m_movement_look;
    private readonly InputAction m_movement_zoom;
    private readonly InputAction m_movement_Newaction;
    public struct MovementActions
    {
        private @HumanoidPlayerControls m_Wrapper;
        public MovementActions(@HumanoidPlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_movement_move;
        public InputAction @look => m_Wrapper.m_movement_look;
        public InputAction @zoom => m_Wrapper.m_movement_zoom;
        public InputAction @Newaction => m_Wrapper.m_movement_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @look.started += instance.OnLook;
            @look.performed += instance.OnLook;
            @look.canceled += instance.OnLook;
            @zoom.started += instance.OnZoom;
            @zoom.performed += instance.OnZoom;
            @zoom.canceled += instance.OnZoom;
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @look.started -= instance.OnLook;
            @look.performed -= instance.OnLook;
            @look.canceled -= instance.OnLook;
            @zoom.started -= instance.OnZoom;
            @zoom.performed -= instance.OnZoom;
            @zoom.canceled -= instance.OnZoom;
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @movement => new MovementActions(this);

    // combat
    private readonly InputActionMap m_combat;
    private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
    private readonly InputAction m_combat_ToggleReady;
    private readonly InputAction m_combat_PickupThrow;
    private readonly InputAction m_combat_Slash;
    private readonly InputAction m_combat_Thrust;
    private readonly InputAction m_combat_CycleCamera;
    private readonly InputAction m_combat_Look;
    private readonly InputAction m_combat_RotateCamera;
    public struct CombatActions
    {
        private @HumanoidPlayerControls m_Wrapper;
        public CombatActions(@HumanoidPlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleReady => m_Wrapper.m_combat_ToggleReady;
        public InputAction @PickupThrow => m_Wrapper.m_combat_PickupThrow;
        public InputAction @Slash => m_Wrapper.m_combat_Slash;
        public InputAction @Thrust => m_Wrapper.m_combat_Thrust;
        public InputAction @CycleCamera => m_Wrapper.m_combat_CycleCamera;
        public InputAction @Look => m_Wrapper.m_combat_Look;
        public InputAction @RotateCamera => m_Wrapper.m_combat_RotateCamera;
        public InputActionMap Get() { return m_Wrapper.m_combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
            @ToggleReady.started += instance.OnToggleReady;
            @ToggleReady.performed += instance.OnToggleReady;
            @ToggleReady.canceled += instance.OnToggleReady;
            @PickupThrow.started += instance.OnPickupThrow;
            @PickupThrow.performed += instance.OnPickupThrow;
            @PickupThrow.canceled += instance.OnPickupThrow;
            @Slash.started += instance.OnSlash;
            @Slash.performed += instance.OnSlash;
            @Slash.canceled += instance.OnSlash;
            @Thrust.started += instance.OnThrust;
            @Thrust.performed += instance.OnThrust;
            @Thrust.canceled += instance.OnThrust;
            @CycleCamera.started += instance.OnCycleCamera;
            @CycleCamera.performed += instance.OnCycleCamera;
            @CycleCamera.canceled += instance.OnCycleCamera;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @RotateCamera.started += instance.OnRotateCamera;
            @RotateCamera.performed += instance.OnRotateCamera;
            @RotateCamera.canceled += instance.OnRotateCamera;
        }

        private void UnregisterCallbacks(ICombatActions instance)
        {
            @ToggleReady.started -= instance.OnToggleReady;
            @ToggleReady.performed -= instance.OnToggleReady;
            @ToggleReady.canceled -= instance.OnToggleReady;
            @PickupThrow.started -= instance.OnPickupThrow;
            @PickupThrow.performed -= instance.OnPickupThrow;
            @PickupThrow.canceled -= instance.OnPickupThrow;
            @Slash.started -= instance.OnSlash;
            @Slash.performed -= instance.OnSlash;
            @Slash.canceled -= instance.OnSlash;
            @Thrust.started -= instance.OnThrust;
            @Thrust.performed -= instance.OnThrust;
            @Thrust.canceled -= instance.OnThrust;
            @CycleCamera.started -= instance.OnCycleCamera;
            @CycleCamera.performed -= instance.OnCycleCamera;
            @CycleCamera.canceled -= instance.OnCycleCamera;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @RotateCamera.started -= instance.OnRotateCamera;
            @RotateCamera.performed -= instance.OnRotateCamera;
            @RotateCamera.canceled -= instance.OnRotateCamera;
        }

        public void RemoveCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActions @combat => new CombatActions(this);

    // ui
    private readonly InputActionMap m_ui;
    private List<IUiActions> m_UiActionsCallbackInterfaces = new List<IUiActions>();
    private readonly InputAction m_ui_Menus;
    private readonly InputAction m_ui_Interact;
    private readonly InputAction m_ui_ToggleReady;
    public struct UiActions
    {
        private @HumanoidPlayerControls m_Wrapper;
        public UiActions(@HumanoidPlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Menus => m_Wrapper.m_ui_Menus;
        public InputAction @Interact => m_Wrapper.m_ui_Interact;
        public InputAction @ToggleReady => m_Wrapper.m_ui_ToggleReady;
        public InputActionMap Get() { return m_Wrapper.m_ui; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UiActions set) { return set.Get(); }
        public void AddCallbacks(IUiActions instance)
        {
            if (instance == null || m_Wrapper.m_UiActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UiActionsCallbackInterfaces.Add(instance);
            @Menus.started += instance.OnMenus;
            @Menus.performed += instance.OnMenus;
            @Menus.canceled += instance.OnMenus;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @ToggleReady.started += instance.OnToggleReady;
            @ToggleReady.performed += instance.OnToggleReady;
            @ToggleReady.canceled += instance.OnToggleReady;
        }

        private void UnregisterCallbacks(IUiActions instance)
        {
            @Menus.started -= instance.OnMenus;
            @Menus.performed -= instance.OnMenus;
            @Menus.canceled -= instance.OnMenus;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @ToggleReady.started -= instance.OnToggleReady;
            @ToggleReady.performed -= instance.OnToggleReady;
            @ToggleReady.canceled -= instance.OnToggleReady;
        }

        public void RemoveCallbacks(IUiActions instance)
        {
            if (m_Wrapper.m_UiActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUiActions instance)
        {
            foreach (var item in m_Wrapper.m_UiActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UiActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UiActions @ui => new UiActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnToggleReady(InputAction.CallbackContext context);
        void OnPickupThrow(InputAction.CallbackContext context);
        void OnSlash(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
        void OnCycleCamera(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnRotateCamera(InputAction.CallbackContext context);
    }
    public interface IUiActions
    {
        void OnMenus(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnToggleReady(InputAction.CallbackContext context);
    }
}
